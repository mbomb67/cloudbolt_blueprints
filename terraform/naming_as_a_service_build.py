import json
from common.methods import set_progress
from infrastructure.models import CustomField
from onefuse.cloudbolt_admin import CbOneFuseManager, Utilities
from utilities.logger import ThreadLogger
from jobs.models import Job
from xui.onefuse.views import get_onefuse_connection_infos
from xui.onefuse.globals import (
    MAX_RUNS, IGNORE_PROPERTIES, UPSTREAM_PROPERTY, VERIFY_CERTS
)

logger = ThreadLogger(__name__)
ONEFUSE_ENDPOINT = "{{ onefuse_endpoint }}"
NAMING_POLICY = "{{ onefuse_naming_policy }}"
COUNT = {{ number_of_names }}


def generate_options_for_onefuse_endpoint(server=None, **kwargs):
    conn_infos = get_onefuse_connection_infos()
    options = []
    for conn_info in conn_infos:
        options.append((conn_info.name, conn_info.name))
    return options


def run(job, **kwargs):
    resource = job.resource_set.first()
    if resource:
        inc = 0
        utilities = Utilities(logger)
        logger.debug(f"Provisioning Naming as a Service for resource: "
                     f"{resource}")
        logger.debug(f"Dictionary of keyword args passed to this "
                     f"plug-in: {kwargs.items()}")
        set_progress(f"Starting OneFuse Naming Policy: "
                     f"{NAMING_POLICY}, Endpoint: {ONEFUSE_ENDPOINT}")
        from xui.onefuse.globals import VERIFY_CERTS
        ofm = CbOneFuseManager(ONEFUSE_ENDPOINT, VERIFY_CERTS, logger=logger)
        properties_stack = run_property_toolkit(resource, utilities)
        try:
            tracking_id = properties_stack["OneFuse_Tracking_Id"]
        except KeyError:
            tracking_id = ""
        onefuse_names = []
        while inc < COUNT:
            set_progress(f'Requesting OneFuse Name #{inc}')
            response_json = ofm.provision_naming(NAMING_POLICY, properties_stack,
                                                 tracking_id)
            resource_name = response_json.get("name")
            onefuse_names.append(resource_name)
            naming_property = f"OneFuse_Naming_{inc}"
            utilities.check_or_create_cf(naming_property)
            create_cf("naming_property", f"OneFuse Name {inc} Data",
                      "OneFuse Name Data", "STR")
            response_json["endpoint"] = ONEFUSE_ENDPOINT
            resource.set_value_for_custom_field(naming_property,
                                                json.dumps(response_json))
            tracking_id = response_json.get("trackingId")
            resource.OneFuse_Tracking_Id = tracking_id
            properties_stack["OneFuse_Tracking_Id"] = tracking_id
            resource.save()
            inc += 1
        create_cf("onefuse_names", "OneFuse Names",
                  "Names generated by OneFuse", "STR", True,
                  show_on_servers=True)
        resource.set_value_for_custom_field("onefuse_names", onefuse_names)
        return "SUCCESS", resource_name, ""
    else:
        set_progress("Resource was not found")


def run_property_toolkit(resource, utilities):
    properties_stack = utilities.get_cb_object_properties(resource)
    total_runs = 0
    onefuse_endpoint = ONEFUSE_ENDPOINT
    calculated_max_runs = MAX_RUNS
    logger.debug(f'PTK running for Resource: {resource}, max runs set '
                 f'to: {calculated_max_runs}')
    ofm = CbOneFuseManager(onefuse_endpoint, VERIFY_CERTS, logger=logger)
    while total_runs < calculated_max_runs:
        logger.info(f'Starting PTK run #: {total_runs + 1}')
        # OneFuse_SPS groups
        sps_properties = ofm.get_sps_properties(properties_stack,
                                                UPSTREAM_PROPERTY,
                                                IGNORE_PROPERTIES)
        properties_stack = ofm.render_and_apply_properties(sps_properties,
                                                           resource,
                                                           properties_stack)

        # OneFuse_CreateProperties
        create_properties = ofm.get_create_properties(
            properties_stack)
        properties_stack = ofm.render_and_apply_properties(create_properties,
                                                           resource,
                                                           properties_stack)

        properties_stack = utilities.get_cb_object_properties(resource)
        total_runs += 1

    return properties_stack


def create_cf(cf_name, cf_label, description, cf_type="STR",
              allow_multiple=False, required=True, **kwargs):
    # You can pass in show_on_servers, show_as_attribute as kwargs
    defaults = {
        "label": cf_label,
        "description": description,
        "required": required,
        "allow_multiple": allow_multiple,
    }
    for key, value in kwargs.items():
        defaults[key] = value

    cf = CustomField.objects.get_or_create(
        name=cf_name, type=cf_type, defaults=defaults
    )
    return cf
