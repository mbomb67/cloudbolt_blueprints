"""
A Blueprint that automates the creation of a CloudBolt Blueprint that submits
a request for an ARM Template.

1. Allows you to upload an ARM template which will be stored on the CloudBolt
appliance.
2. Create a Blueprint that leverages that ARM template to create Azure
Resources
3. Also allows for the upload of a parameters file. From the upload of a
parameters file, create each parameter on the blueprint with the correct type.
"""
if __name__ == "__main__":
    import os
    import sys
    import django

    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
    sys.path.append("/opt/cloudbolt")
    sys.path.append("/var/opt/cloudbolt/proserv")
    django.setup()

import json
from cbhooks.models import CloudBoltHook, HookPoint, HookPointAction, \
    OrchestrationHook
from infrastructure.models import CustomField, FieldDependency
from orders.models import CustomFieldValue
from resources.models import ResourceType
from servicecatalog.models import ServiceBlueprint, \
    RunCloudBoltHookServiceItem, TearDownServiceItem
from common.methods import set_progress
from jobs.models import Job
import os
from utilities.logger import ThreadLogger

logger = ThreadLogger(__name__)

BLUEPRINT_NAME = '{{blueprint_name}}'
TEMPLATE_JSON = '{{template_json}}'
PARAMS_JSON = '{{parameters_json}}'
RESOURCE_TYPE = '{{resource_type}}'
ROOT_DIR = '/var/opt/cloudbolt/proserv/arm_builder/'
TEMPLATE_DIR = f'{ROOT_DIR}templates/'
UPLOADS_DIR = '/var/www/html/cloudbolt/static/uploads/'


def create_param_name(param_prefix, bp_id):
    return f'{param_prefix}_{bp_id}'


def generate_options_for_resource_type(server=None, **kwargs):
    # Provide an empty option to auto-create a new service plan.
    options = [('', '--- Select a Resource Type ---')]
    resource_types = ResourceType.objects.all()
    for resource_type in resource_types:
        options.append((resource_type.name, resource_type.label))
    return options


def create_custom_field_option(blueprint, value, field, cf_type):
    logger.debug(f'Creating Parameter: {field.name} option, type: {cf_type},'
                 f' Value: {value}')
    if cf_type == 'STR':
        cfv = CustomFieldValue.objects.get_or_create(
            str_value=value, field=field
        )[0]
    elif cf_type == 'INT':
        cfv = CustomFieldValue.objects.get_or_create(
            int_value=value, field=field
        )[0]
    elif cf_type == 'BOOL':
        cfv = CustomFieldValue.objects.get_or_create(
            boolean_value=value, field=field
        )[0]
    elif cf_type == 'CODE':
        cfv = CustomFieldValue.objects.get_or_create(
            txt_value=value, field=field
        )[0]
    else:
        logger.warn(f'Unknown Parameter type: {cf_type}, passed in, not '
                     f'creating custom field option for field: {field}')
        return None
    blueprint.custom_field_options.add(cfv.id)


def create_cf(cf_name, cf_label, description, cf_type="STR", required=True,
              **kwargs):
    # You can pass in show_on_servers, show_as_attribute as kwargs
    defaults = {
        'label': cf_label,
        'description': description,
        'required': required,
    }
    for key, value in kwargs.items():
        defaults[key] = value

    cf = CustomField.objects.get_or_create(
        name=cf_name,
        type=cf_type,
        defaults=defaults
    )
    return cf


def create_cloudbolt_hook(new_action_name, source_file):
    hook, hook_created = CloudBoltHook.objects.get_or_create(
        name=new_action_name,
        source_code_url=f'file://{ROOT_DIR}{source_file}'
    )
    hook.get_runtime_module()
    hook.description = 'Used for ARM Builder'
    hook.shared = True
    hook.save()
    if hook_created:
        set_progress(f'CloudBolt Hook created: {new_action_name}')
    else:
        set_progress(f'CloudBolt Hook retrieved: {new_action_name}')
    return hook


def create_generated_options_action(new_action_name, source_file):
    # Create Action (CloudBoltHook)
    hook = create_cloudbolt_hook(new_action_name, source_file)

    # Create HookPointAction
    hp_id = HookPoint.objects.get(name='generated_custom_field_options').id
    hpa = HookPointAction.objects.get_or_create(
        name=new_action_name,
        hook=hook,
        hook_point_id=hp_id
    )[0]
    hpa.enabled = True
    hpa.continue_on_failure = False
    hpa.save()

    oh = OrchestrationHook.objects.get_or_create(
        name=new_action_name, cloudbolthook=hook
    )[0]
    oh.hookpointaction_set.add(hpa)
    oh.save()

    return oh


def create_param_label(param):
    # Handles default ARM templates generated by Azure where all params are
    # camelCase
    param_label = " ".join(camel_case_split(param)).title()
    # Handles QuickStart templates where underscores are used
    param_label = param_label.replace('_', ' ')
    return param_label


def camel_case_split(str):
    words = [[str[0]]]

    for c in str[1:]:
        if words[-1][-1].islower() and c.isupper():
            words.append(list(c))
        else:
            words[-1].append(c)

    return [''.join(word) for word in words]


def run(job, **kwargs):
    set_progress(f'BLUEPRINT_NAME: {BLUEPRINT_NAME}')
    set_progress(f'TEMPLATE_JSON: {TEMPLATE_JSON}')
    set_progress(f'PARAMETERS_JSON: {PARAMS_JSON}')

    # Create Blueprint
    blueprint = ServiceBlueprint(
        name=BLUEPRINT_NAME,
        resource_type=ResourceType.objects.get(name=RESOURCE_TYPE)
    )
    blueprint.save()
    bp_id = blueprint.id
    set_progress(f'Created Blueprint: {BLUEPRINT_NAME}, ID {bp_id}')

    # Move Files to new Dir
    bp_template_dir = f'{TEMPLATE_DIR}{bp_id}/'
    if not os.path.exists(bp_template_dir):
        os.makedirs(bp_template_dir)
    params_file = PARAMS_JSON.split('/')[-1]
    params_path = f'{UPLOADS_DIR}{PARAMS_JSON}'
    new_params_path = f'{bp_template_dir}{params_file}'
    template_file = TEMPLATE_JSON.split('/')[-1]
    template_path = f'{UPLOADS_DIR}{TEMPLATE_JSON}'
    new_template_path = f'{bp_template_dir}{template_file}'
    os.replace(params_path, new_params_path)
    os.replace(template_path, new_template_path)
    set_progress(f'Template and Params files saved to: {bp_template_dir}')

    # Store file locations on blueprint
    cf = create_cf('arm_builder_params_file_path', 'Parameters File Path',
                   'Path for the ARM Template params file')[0]
    blueprint.custom_fields_for_resource.add(cf)
    create_custom_field_option(blueprint, new_params_path, cf, 'STR')

    cf = create_cf('arm_builder_template_file_path', 'Template File Path',
                   'Path for the ARM Template file')[0]
    blueprint.custom_fields_for_resource.add(cf)
    create_custom_field_option(blueprint, new_template_path, cf, 'STR')

    # Create Azure Deployment Name param
    cf = create_cf('arm_builder_deployment_name', 'Azure Deployment Name',
                   'Path for the ARM Template file', show_on_servers=True)[0]
    blueprint.custom_fields_for_resource.add(cf)

    # Create Environment Parameter, add to Blueprint
    env_cf, cf_created = create_cf('arm_builder_env_id', 'Environment',
                                   'Azure Environment')
    # Create Programmatically Gen Options action for environment
    oh = create_generated_options_action(
        "Generate options for 'arm_builder_env_id'",
        'generate_options_for_env_id.py')
    env_cf.orchestration_hooks.add(oh)
    env_cf.save()
    blueprint.custom_fields_for_resource.add(env_cf)

    # Create Resource Group Parameter, add to Blueprint
    rg_cf, cf_created = create_cf('arm_builder_resource_group',
                                  'Resource Group', 'Azure Resource Group',
                                  show_on_servers=True, show_as_attribute=True)
    # Create Programmatically Gen Options action for Resource group
    oh = create_generated_options_action(
        "Generate options for 'arm_builder_resource_group'",
        'generate_options_for_resource_group.py')
    rg_cf.orchestration_hooks.add(oh)
    rg_cf.save()
    blueprint.custom_fields_for_resource.add(rg_cf)

    # Create Parameter dependency - allows pulling available resource groups
    # from the selected environment
    dependency = FieldDependency.objects.get_or_create(
        dependent_field_id=rg_cf.id,
        controlling_field_id=env_cf.id,
        dependency_type='REGENOPTIONS'
    )

    # Add Build Item
    hook = create_cloudbolt_hook('Azure Resource Manager Build',
                                 'arm_builder_build.py')
    oh, oh_created = OrchestrationHook.objects.get_or_create(
        name='Azure Resource Manager Build', cloudbolthook=hook
    )
    rcbhsi, rcbhsi_created = RunCloudBoltHookServiceItem.objects.get_or_create(
        name='Azure Resource Manager Build', hook=oh, blueprint=blueprint,
        show_on_order_form=False, run_on_scale_up=False
    )

    # Add Teardown Item
    hook = create_cloudbolt_hook('Azure Resource Manager Teardown',
                                 'arm_builder_delete.py')
    oh, oh_created = OrchestrationHook.objects.get_or_create(
        name='Azure Resource Manager Teardown', cloudbolthook=hook
    )
    tdsi, tdsi_created = TearDownServiceItem.objects.get_or_create(
        name='Azure Resource Manager Teardown', hook=oh, blueprint=blueprint,
        deploy_seq=-1
    )

    # Create Params
    params_content = json.loads(open(new_params_path, "r").read())
    template_content = json.loads(open(new_template_path, "r").read())
    input_params = params_content["parameters"]
    template_params = template_content["parameters"]
    param_prefix = f'arm_builder_{bp_id}_'
    for key in template_params.keys():
        param_type = template_params[key]["type"]
        new_param_name = f'{param_prefix}{key}'
        param_label = create_param_label(key)
        try:
            description = template_params[key]["metadata"]["description"]
        except KeyError:
            description = 'ARM Builder Param'
        if param_type == 'securestring':
            cf, cf_created = create_cf(new_param_name, param_label,
                                       description, 'PWD')
            # Do not want to set a value for passwords, just continue to next
            # param
            logger.debug(f'Created Param: {new_param_name}, type: {type}, '
                         f'label: {param_label}')
            blueprint.custom_fields_for_resource.add(cf)
            continue
        elif param_type == 'string':
            cf_type = 'STR'
        elif param_type == 'int':
            cf_type = 'INT'
        elif param_type == 'bool':
            cf_type = 'BOOL'
        elif param_type == 'object':
            cf_type = 'CODE'
        else:
            logger.warn(f'Unable to find a known type for parameter: {key}.'
                        f'This parameter will not be considered in the created'
                        f'blueprint')
            continue
        try:
            allowed_values = template_params[key]["allowedValues"]
        except KeyError:
            allowed_values = None

        # Create the parameter
        logger.debug(f'Creating Parameter: {new_param_name}, type: {type}, '
                     f'label: {param_label}')
        cf, cf_created = create_cf(new_param_name, param_label, description,
                                   cf_type, show_on_servers=True)
        # Add it to the Blueprint
        blueprint.custom_fields_for_resource.add(cf)
        # Create Add value from parameters file as selection in dropdown

        # If a list of allowed values exists, then we want to create a dropdown
        # with those values. If allowed values are not set, check the params
        # file for a value and then the template itself for a default value
        # to set a single value for the parameter options
        if allowed_values:
            for allowed_value in allowed_values:
                create_custom_field_option(blueprint, allowed_value, cf,
                                           cf_type)
        else:
            try:
                default_value = input_params[key]["value"]
            except KeyError:
                try:
                    default_value = template_params[key]["defaultValue"]
                except KeyError:
                    default_value = None
            if default_value:
                create_custom_field_option(blueprint, default_value, cf,
                                           cf_type)

    return "SUCCESS", "", ""


if __name__ == "__main__":
    job_id = sys.argv[1]
    j = Job.objects.get(id=job_id)
    run = run(j)
    if run[0] == "FAILURE":
        set_progress(run[1])
